{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"9aff9d97f3950c64788b8f64b4b1a82cde03577f","modified":1570195099588},{"_id":"source/.Ulysses-Settings.plist","hash":"70e433f98d0096cbff2f35651031e469f6bb33a0","modified":1575946127645},{"_id":"source/.Ulysses-Group.plist","hash":"c15b9d1d569614a406ae3e90d9d3b192e8b856dc","modified":1577757674850},{"_id":"source/CNAME","hash":"99255754f358ba58548ef289ee054edb097a2b70","modified":1570114813424},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1570114813440},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1570114813440},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1570114813440},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1570114813441},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1570114813441},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1570114813449},{"_id":"source/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1570195146516},{"_id":"source/img/avatar.jpg","hash":"6fc1eb8040ae03f80448db966080228f319eb6bb","modified":1570195127517},{"_id":"source/about/index.md","hash":"5b42a920026fe2e4d5c95345c3ff59ebbf8cad09","modified":1570196316702},{"_id":"source/_posts/.DS_Store","hash":"bff1d275c7d258c275a57a797253a71db125aa91","modified":1577757356919},{"_id":"source/_posts/.Ulysses-Group.plist","hash":"5e68d31572de0b2cade740d2c657136193bfa215","modified":1578649632797},{"_id":"source/_posts/SFINAE ：编译期的函数重载.md","hash":"738f73d5fb6b25e5dc707e2e01c24f73438d5e49","modified":1578706929398},{"_id":"source/_posts/The Curse of Productivity.md","hash":"ec9c72f1410eb021466331524cf9b91f05e70e72","modified":1571648625378},{"_id":"source/_posts/The Summary of 2019.md","hash":"fa9f54d3830752f3bae4c10288cddc1701891c60","modified":1577758322581},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1570114813441},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1570114813441},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1570114813441},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1570114813442},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1570114813442},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1570114813442},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1570114813442},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1570114813443},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1570114813443},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1570114813443},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1570114813443},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1570114813443},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1570114813449},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1570114813448},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1570114813448},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1570114813448},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1570114813448},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1570114813448},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1570114813448},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1570114813449},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1570114813447},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1570114813447},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1570114813447},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1570114813447},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1570114813448},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1570114813444},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1570114813444},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1570114813444},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1570114813444},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1570114813444},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1570114813445},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1570114813445},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1570114813445},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1570114813445},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1570114813445},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1570114813447},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1570114813449},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1570114813452},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1570114813457},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1570114813457},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1570114813458},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1570114813458},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1570114813458},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1570114813458},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1570114813459},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1570114813461},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1570114813461},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1570114813461},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1570114813462},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1570114813445},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1570114813446},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1570114813446},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1570114813446},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1570114813446},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1570114813447},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1570114813449},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1570114813450},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1570114813450},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1570114813450},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1570114813450},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1570114813450},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1570114813451},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1570114813451},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1570114813451},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1570114813451},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1570114813451},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1570114813452},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1570114813453},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1570114813453},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1570114813455},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1570114813459},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1570114813459},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1570114813460},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1570114813460},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1570114813460},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1570114813460},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1570114813455},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1570114813454},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1570114813457},{"_id":"source/_posts/The Curse of Productivity/1.png","hash":"409ed21217e967407489b2c2c49ee8c52591d04a","modified":1570195266726}],"Category":[],"Data":[],"Page":[{"layout":"about","title":"About","_content":"\nHi","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\n---\n\nHi","date":"2019-10-04T13:38:36.718Z","updated":"2019-10-04T13:38:36.702Z","path":"about/index.html","comments":1,"_id":"ck58xgwnw0000xquemohxfj9z","content":"<p>Hi</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Hi</p>\n"}],"Post":[{"title":"The Curse of Productivity","date":"2019-10-03T15:23:27.000Z","_content":"\n### 1. The Prefix\n在购买了这个打算用做博客的域名一年后，一篇文章没写下的我被namesilo催续费了。支付了 $7.99 有点肉疼，毕竟白放了一年什么也没干。\n\n### 2. The Curse\n抛开文学水平低下不说，这一年里还是有几次冲动想要写点东西的，也确实写下了一点，但都流产了。究其原因，不知从什么时候开始，我太过关注于工具所能提供的生产力，甚至大过了生产本身。生产工具的不称手导致生产需要更多的 mental energy，导致完全不想进行生产。Reddit 上 vim 板的这张图就特别贴切地描述了这个状态：\n\n![img][image-1]\n\n当然这种状态有好处也有坏处，拿写博客来说：\n\nCons: 这一年里的几次冲动都因为没有顺心如意的工具鸽了。这次在肉疼之后总算找到一个顺心的工具，叫做 Ulysses，才能支撑我在百忙之中（并没有）写下这篇水文（这是真的），虽然插入图片的体验并不是那么顺畅（\n\nPros: 这个工具也让我意识到笔记的收集和笔记的整理并不需要在同一个App上。所以打算彻底抛弃现在使用的非常 buggy 的为知笔记，切换成 Ulysses + Evernote。希望得到生产力的大跃进（好像有点不对\n\n### 3. The Productivity\n\n文章的第二段原本是叫 `Curse of Productivity`， 害怕有哪些单词拼错，放到 Google 搜索了一下，发现 Observer 的文章 [The Curse of Productivity][1] 描述了和我大概一样的状态。索性把文章也改成同名了。其引用了[二八定律][2]表示花仅花20%的时间就能得到80%的生产力提高，其余20%生产力的提高要花掉80%的时间，以至于因为生产力提高而省下的时间可能还不够提高生产力本身所花费的时间。对此我真是深有同感。配置VIM的时间中有80%的都花在为了提高那20%的生产力上。\n\n文章还认为如果太高效会导致 less creative，对此我不敢苟同。我认为既然生产力的提高降低了做事情需要的 mental energy，那么也就会有更多的 mental energy 来做更加 creative 的事情。\n\n### 4. The End\n\n从立题到内容有点高开低走了哈，但是废话就写到这，希望今年可以多多产出，[Consume less, create more][3]!\n\n> 你看这篇文章 —— 还是在写生产力！\n\n[1]:\thttps://observer.com/2014/02/the-curse-of-productivity-when-optimization-holds-you-back/\n[2]:\thttps://en.wikipedia.org/wiki/Pareto_principle\n[3]:\thttps://news.ycombinator.com/item?id=20781463\n\n[image-1]:\thttps://i.redd.it/o1xoolcmg4x01.png","source":"_posts/The Curse of Productivity.md","raw":"---\ntitle: The Curse of Productivity\ndate: 2019-10-03 23:23:27\ntags:\n---\n\n### 1. The Prefix\n在购买了这个打算用做博客的域名一年后，一篇文章没写下的我被namesilo催续费了。支付了 $7.99 有点肉疼，毕竟白放了一年什么也没干。\n\n### 2. The Curse\n抛开文学水平低下不说，这一年里还是有几次冲动想要写点东西的，也确实写下了一点，但都流产了。究其原因，不知从什么时候开始，我太过关注于工具所能提供的生产力，甚至大过了生产本身。生产工具的不称手导致生产需要更多的 mental energy，导致完全不想进行生产。Reddit 上 vim 板的这张图就特别贴切地描述了这个状态：\n\n![img][image-1]\n\n当然这种状态有好处也有坏处，拿写博客来说：\n\nCons: 这一年里的几次冲动都因为没有顺心如意的工具鸽了。这次在肉疼之后总算找到一个顺心的工具，叫做 Ulysses，才能支撑我在百忙之中（并没有）写下这篇水文（这是真的），虽然插入图片的体验并不是那么顺畅（\n\nPros: 这个工具也让我意识到笔记的收集和笔记的整理并不需要在同一个App上。所以打算彻底抛弃现在使用的非常 buggy 的为知笔记，切换成 Ulysses + Evernote。希望得到生产力的大跃进（好像有点不对\n\n### 3. The Productivity\n\n文章的第二段原本是叫 `Curse of Productivity`， 害怕有哪些单词拼错，放到 Google 搜索了一下，发现 Observer 的文章 [The Curse of Productivity][1] 描述了和我大概一样的状态。索性把文章也改成同名了。其引用了[二八定律][2]表示花仅花20%的时间就能得到80%的生产力提高，其余20%生产力的提高要花掉80%的时间，以至于因为生产力提高而省下的时间可能还不够提高生产力本身所花费的时间。对此我真是深有同感。配置VIM的时间中有80%的都花在为了提高那20%的生产力上。\n\n文章还认为如果太高效会导致 less creative，对此我不敢苟同。我认为既然生产力的提高降低了做事情需要的 mental energy，那么也就会有更多的 mental energy 来做更加 creative 的事情。\n\n### 4. The End\n\n从立题到内容有点高开低走了哈，但是废话就写到这，希望今年可以多多产出，[Consume less, create more][3]!\n\n> 你看这篇文章 —— 还是在写生产力！\n\n[1]:\thttps://observer.com/2014/02/the-curse-of-productivity-when-optimization-holds-you-back/\n[2]:\thttps://en.wikipedia.org/wiki/Pareto_principle\n[3]:\thttps://news.ycombinator.com/item?id=20781463\n\n[image-1]:\thttps://i.redd.it/o1xoolcmg4x01.png","slug":"The Curse of Productivity","published":1,"updated":"2019-10-21T09:03:45.378Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck58xgwo30002xqued4hfbdrq","content":"<h3 id=\"1-The-Prefix\"><a href=\"#1-The-Prefix\" class=\"headerlink\" title=\"1. The Prefix\"></a>1. The Prefix</h3><p>在购买了这个打算用做博客的域名一年后，一篇文章没写下的我被namesilo催续费了。支付了 $7.99 有点肉疼，毕竟白放了一年什么也没干。</p>\n<h3 id=\"2-The-Curse\"><a href=\"#2-The-Curse\" class=\"headerlink\" title=\"2. The Curse\"></a>2. The Curse</h3><p>抛开文学水平低下不说，这一年里还是有几次冲动想要写点东西的，也确实写下了一点，但都流产了。究其原因，不知从什么时候开始，我太过关注于工具所能提供的生产力，甚至大过了生产本身。生产工具的不称手导致生产需要更多的 mental energy，导致完全不想进行生产。Reddit 上 vim 板的这张图就特别贴切地描述了这个状态：</p>\n<p><img src=\"https://i.redd.it/o1xoolcmg4x01.png\" alt=\"img\"></p>\n<p>当然这种状态有好处也有坏处，拿写博客来说：</p>\n<p>Cons: 这一年里的几次冲动都因为没有顺心如意的工具鸽了。这次在肉疼之后总算找到一个顺心的工具，叫做 Ulysses，才能支撑我在百忙之中（并没有）写下这篇水文（这是真的），虽然插入图片的体验并不是那么顺畅（</p>\n<p>Pros: 这个工具也让我意识到笔记的收集和笔记的整理并不需要在同一个App上。所以打算彻底抛弃现在使用的非常 buggy 的为知笔记，切换成 Ulysses + Evernote。希望得到生产力的大跃进（好像有点不对</p>\n<h3 id=\"3-The-Productivity\"><a href=\"#3-The-Productivity\" class=\"headerlink\" title=\"3. The Productivity\"></a>3. The Productivity</h3><p>文章的第二段原本是叫 <code>Curse of Productivity</code>， 害怕有哪些单词拼错，放到 Google 搜索了一下，发现 Observer 的文章 <a href=\"https://observer.com/2014/02/the-curse-of-productivity-when-optimization-holds-you-back/\" target=\"_blank\" rel=\"noopener\">The Curse of Productivity</a> 描述了和我大概一样的状态。索性把文章也改成同名了。其引用了<a href=\"https://en.wikipedia.org/wiki/Pareto_principle\" target=\"_blank\" rel=\"noopener\">二八定律</a>表示花仅花20%的时间就能得到80%的生产力提高，其余20%生产力的提高要花掉80%的时间，以至于因为生产力提高而省下的时间可能还不够提高生产力本身所花费的时间。对此我真是深有同感。配置VIM的时间中有80%的都花在为了提高那20%的生产力上。</p>\n<p>文章还认为如果太高效会导致 less creative，对此我不敢苟同。我认为既然生产力的提高降低了做事情需要的 mental energy，那么也就会有更多的 mental energy 来做更加 creative 的事情。</p>\n<h3 id=\"4-The-End\"><a href=\"#4-The-End\" class=\"headerlink\" title=\"4. The End\"></a>4. The End</h3><p>从立题到内容有点高开低走了哈，但是废话就写到这，希望今年可以多多产出，<a href=\"https://news.ycombinator.com/item?id=20781463\" target=\"_blank\" rel=\"noopener\">Consume less, create more</a>!</p>\n<blockquote>\n<p>你看这篇文章 —— 还是在写生产力！</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-The-Prefix\"><a href=\"#1-The-Prefix\" class=\"headerlink\" title=\"1. The Prefix\"></a>1. The Prefix</h3><p>在购买了这个打算用做博客的域名一年后，一篇文章没写下的我被namesilo催续费了。支付了 $7.99 有点肉疼，毕竟白放了一年什么也没干。</p>\n<h3 id=\"2-The-Curse\"><a href=\"#2-The-Curse\" class=\"headerlink\" title=\"2. The Curse\"></a>2. The Curse</h3><p>抛开文学水平低下不说，这一年里还是有几次冲动想要写点东西的，也确实写下了一点，但都流产了。究其原因，不知从什么时候开始，我太过关注于工具所能提供的生产力，甚至大过了生产本身。生产工具的不称手导致生产需要更多的 mental energy，导致完全不想进行生产。Reddit 上 vim 板的这张图就特别贴切地描述了这个状态：</p>\n<p><img src=\"https://i.redd.it/o1xoolcmg4x01.png\" alt=\"img\"></p>\n<p>当然这种状态有好处也有坏处，拿写博客来说：</p>\n<p>Cons: 这一年里的几次冲动都因为没有顺心如意的工具鸽了。这次在肉疼之后总算找到一个顺心的工具，叫做 Ulysses，才能支撑我在百忙之中（并没有）写下这篇水文（这是真的），虽然插入图片的体验并不是那么顺畅（</p>\n<p>Pros: 这个工具也让我意识到笔记的收集和笔记的整理并不需要在同一个App上。所以打算彻底抛弃现在使用的非常 buggy 的为知笔记，切换成 Ulysses + Evernote。希望得到生产力的大跃进（好像有点不对</p>\n<h3 id=\"3-The-Productivity\"><a href=\"#3-The-Productivity\" class=\"headerlink\" title=\"3. The Productivity\"></a>3. The Productivity</h3><p>文章的第二段原本是叫 <code>Curse of Productivity</code>， 害怕有哪些单词拼错，放到 Google 搜索了一下，发现 Observer 的文章 <a href=\"https://observer.com/2014/02/the-curse-of-productivity-when-optimization-holds-you-back/\" target=\"_blank\" rel=\"noopener\">The Curse of Productivity</a> 描述了和我大概一样的状态。索性把文章也改成同名了。其引用了<a href=\"https://en.wikipedia.org/wiki/Pareto_principle\" target=\"_blank\" rel=\"noopener\">二八定律</a>表示花仅花20%的时间就能得到80%的生产力提高，其余20%生产力的提高要花掉80%的时间，以至于因为生产力提高而省下的时间可能还不够提高生产力本身所花费的时间。对此我真是深有同感。配置VIM的时间中有80%的都花在为了提高那20%的生产力上。</p>\n<p>文章还认为如果太高效会导致 less creative，对此我不敢苟同。我认为既然生产力的提高降低了做事情需要的 mental energy，那么也就会有更多的 mental energy 来做更加 creative 的事情。</p>\n<h3 id=\"4-The-End\"><a href=\"#4-The-End\" class=\"headerlink\" title=\"4. The End\"></a>4. The End</h3><p>从立题到内容有点高开低走了哈，但是废话就写到这，希望今年可以多多产出，<a href=\"https://news.ycombinator.com/item?id=20781463\" target=\"_blank\" rel=\"noopener\">Consume less, create more</a>!</p>\n<blockquote>\n<p>你看这篇文章 —— 还是在写生产力！</p>\n</blockquote>\n"},{"title":"SFINAE ：编译期的类成员函数重载","date":"2020-01-09T16:00:00.000Z","_content":"\n最近在写模板类的时候遇到一个问题：一个类成员函数如何针对某一特定的`template<typename T>` 模板参数类型，有默认的行为。\n\n请你先想五秒钟，再接着往下看。\n\n我想你应该和我一样，映入眼帘的第一个想法，是在这个函数里调用typeid(T)来判断T的类型，以此来让函数针对某一类型T有默认的行为：\n\n```cpp\nif (typeid(T) == typeid(std::string)) {\n\t// 针对 string 的默认行为\n}\n```\n\n但是很抱歉，事与愿违，事情远远没有我们想象的那么简单。\n发生了什么事呢？\n让我们先来个看个完整的例子\n\n```cpp\n#include <string>\n#include <vector>\n#include <iostream>\n\ntemplate<typename T>\nclass Printer\n{\npublic:\n    Printer() { }\n\n    void DoIt(const T& t)\n    {\n        if (typeid(T) == typeid(std::string)) {\n            std::cout << t << std::endl;\n        } else {\n            std::cout << \"I don't know how to print\" << std::endl;\n        }\n    }\n};\n\nint main(int argc, char** argv)\n{\n    Printer<std::string> p;\n    p.DoIt(\"WTF\");\n\n    Printer<std::vector<char>> p2;\n    p2.DoIt({'W', 'T', 'F'});\n\n    return 0;\n}\n```\n\n编译它\n\n```cpp\n% clang++ SFINAE.cpp -std=c++11\nSFINAE.cpp:14:23: error: invalid operands to binary expression ('ostream' (aka 'basic_ostream<char>') and 'const std::vector<char, std::allocator<char> >')\n            std::cout << t << std::endl;\n            ~~~~~~~~~ ^  ~\n```\n\n可以看到编译器给出了没办法调用`std::cout<< t << std::endl`的错误，t是一个`std::vector<char>`类型。\n看到这里你应该明白了，在上述例子的第14行中，编译器对模板使用了`std::vector<char>`类型进行实例化，实例化后的Printer类变成了这个样子：\n\n```cpp\nclass Printer\n{\npublic:\n    Printer() { }\n\n    void DoIt(const std::vector<char>& t)\n    {\n        if (typeid(std::vector<char>) == typeid(std::string)) {\n            std::cout << t << std::endl;\n        } else {\n            std::cout << \"I don't know how to print\" << std::endl;\n        }\n    }\n};\n```\n\n虽然第8行的if永远都不会成立，但是编译器可没有那么聪明。他只看到了你要对 `std::vector<char>`类型调用std::cout进行输出，这当然是不行的。\n你可能会想，要是编译器足够聪明，可以把这段永远不会执行的if分支在编译期给消灭掉，不就得了吗？对此我们暂时按下不表。先来看看在C++11标准下，要如何解决这个问题。也就是说，如何实现一个 “编译期的if”。\n\n另一个想法映入眼帘，\n\n我们要如何实现针对类成员函数的“偏特化”。\n\n先把正确答案贴上，别急着关闭网页，我慢慢跟你解释。\n\n```cpp\nclass Printer\n{\npublic:\n    Printer() {\n    }\n\n    template <typename U = T>\n    void\n    DoIt(const T& t, typename std::enable_if<std::is_same<U, std::string>::value, void>::type * = nullptr)\n    {\n        std::cout << t << std::endl;\n    }\n\n    template <typename U = T>\n    void\n    DoIt(const T& t, typename std::enable_if<!std::is_same<U, std::string>::value, void>::type * = nullptr)\n    {\n        std::cout << \"I don't know how to print\" << std::endl;\n    }\n};\n```\n\n先从本文的标题说起。SFINAE是「Substitution failure is not an error」的缩写。\n## typename\n[http://feihu.me/blog/2014/the-origin-and-usage-of-typename/][1]\n\n## SFINAE\n[https://zhuanlan.zhihu.com/p/21314708][2]\n\n## immediate context\n[https://codeday.me/en/qa/20190306/13897.html][3]\n\n## std::enable\\_if\\_\n\n[1]:\thttp://feihu.me/blog/2014/the-origin-and-usage-of-typename/\n[2]:\thttps://zhuanlan.zhihu.com/p/21314708\n[3]:\thttps://codeday.me/en/qa/20190306/13897.html","source":"_posts/SFINAE ：编译期的类成员函数重载.md","raw":"---\ntitle: SFINAE ：编译期的类成员函数重载\ndate: 2020-01-10 00:00:00\ntags:\n---\n\n最近在写模板类的时候遇到一个问题：一个类成员函数如何针对某一特定的`template<typename T>` 模板参数类型，有默认的行为。\n\n请你先想五秒钟，再接着往下看。\n\n我想你应该和我一样，映入眼帘的第一个想法，是在这个函数里调用typeid(T)来判断T的类型，以此来让函数针对某一类型T有默认的行为：\n\n```cpp\nif (typeid(T) == typeid(std::string)) {\n\t// 针对 string 的默认行为\n}\n```\n\n但是很抱歉，事与愿违，事情远远没有我们想象的那么简单。\n发生了什么事呢？\n让我们先来个看个完整的例子\n\n```cpp\n#include <string>\n#include <vector>\n#include <iostream>\n\ntemplate<typename T>\nclass Printer\n{\npublic:\n    Printer() { }\n\n    void DoIt(const T& t)\n    {\n        if (typeid(T) == typeid(std::string)) {\n            std::cout << t << std::endl;\n        } else {\n            std::cout << \"I don't know how to print\" << std::endl;\n        }\n    }\n};\n\nint main(int argc, char** argv)\n{\n    Printer<std::string> p;\n    p.DoIt(\"WTF\");\n\n    Printer<std::vector<char>> p2;\n    p2.DoIt({'W', 'T', 'F'});\n\n    return 0;\n}\n```\n\n编译它\n\n```cpp\n% clang++ SFINAE.cpp -std=c++11\nSFINAE.cpp:14:23: error: invalid operands to binary expression ('ostream' (aka 'basic_ostream<char>') and 'const std::vector<char, std::allocator<char> >')\n            std::cout << t << std::endl;\n            ~~~~~~~~~ ^  ~\n```\n\n可以看到编译器给出了没办法调用`std::cout<< t << std::endl`的错误，t是一个`std::vector<char>`类型。\n看到这里你应该明白了，在上述例子的第14行中，编译器对模板使用了`std::vector<char>`类型进行实例化，实例化后的Printer类变成了这个样子：\n\n```cpp\nclass Printer\n{\npublic:\n    Printer() { }\n\n    void DoIt(const std::vector<char>& t)\n    {\n        if (typeid(std::vector<char>) == typeid(std::string)) {\n            std::cout << t << std::endl;\n        } else {\n            std::cout << \"I don't know how to print\" << std::endl;\n        }\n    }\n};\n```\n\n虽然第8行的if永远都不会成立，但是编译器可没有那么聪明。他只看到了你要对 `std::vector<char>`类型调用std::cout进行输出，这当然是不行的。\n你可能会想，要是编译器足够聪明，可以把这段永远不会执行的if分支在编译期给消灭掉，不就得了吗？对此我们暂时按下不表。先来看看在C++11标准下，要如何解决这个问题。也就是说，如何实现一个 “编译期的if”。\n\n另一个想法映入眼帘，\n\n我们要如何实现针对类成员函数的“偏特化”。\n\n先把正确答案贴上，别急着关闭网页，我慢慢跟你解释。\n\n```cpp\nclass Printer\n{\npublic:\n    Printer() {\n    }\n\n    template <typename U = T>\n    void\n    DoIt(const T& t, typename std::enable_if<std::is_same<U, std::string>::value, void>::type * = nullptr)\n    {\n        std::cout << t << std::endl;\n    }\n\n    template <typename U = T>\n    void\n    DoIt(const T& t, typename std::enable_if<!std::is_same<U, std::string>::value, void>::type * = nullptr)\n    {\n        std::cout << \"I don't know how to print\" << std::endl;\n    }\n};\n```\n\n先从本文的标题说起。SFINAE是「Substitution failure is not an error」的缩写。\n## typename\n[http://feihu.me/blog/2014/the-origin-and-usage-of-typename/][1]\n\n## SFINAE\n[https://zhuanlan.zhihu.com/p/21314708][2]\n\n## immediate context\n[https://codeday.me/en/qa/20190306/13897.html][3]\n\n## std::enable\\_if\\_\n\n[1]:\thttp://feihu.me/blog/2014/the-origin-and-usage-of-typename/\n[2]:\thttps://zhuanlan.zhihu.com/p/21314708\n[3]:\thttps://codeday.me/en/qa/20190306/13897.html","slug":"SFINAE ：编译期的类成员函数重载","published":1,"updated":"2020-01-13T05:47:20.943Z","_id":"ck58y1cpv0000y3ue2729420w","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近在写模板类的时候遇到一个问题：一个类成员函数如何针对某一特定的<code>template&lt;typename T&gt;</code> 模板参数类型，有默认的行为。</p>\n<p>请你先想五秒钟，再接着往下看。</p>\n<p>我想你应该和我一样，映入眼帘的第一个想法，是在这个函数里调用typeid(T)来判断T的类型，以此来让函数针对某一类型T有默认的行为：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeid</span>(T) == <span class=\"keyword\">typeid</span>(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>)) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 针对 string 的默认行为</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是很抱歉，事与愿违，事情远远没有我们想象的那么简单。<br>发生了什么事呢？<br>让我们先来个看个完整的例子</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Printer</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Printer() &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DoIt</span><span class=\"params\">(<span class=\"keyword\">const</span> T&amp; t)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeid</span>(T) == <span class=\"keyword\">typeid</span>(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; t &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"I don't know how to print\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Printer&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&gt; p;</span><br><span class=\"line\">    p.DoIt(<span class=\"string\">\"WTF\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Printer&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt;&gt; p2;</span><br><span class=\"line\">    p2.DoIt(&#123;<span class=\"string\">'W'</span>, <span class=\"string\">'T'</span>, <span class=\"string\">'F'</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译它</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">% clang++ SFINAE.cpp -<span class=\"built_in\">std</span>=c++<span class=\"number\">11</span></span><br><span class=\"line\">SFINAE.cpp:14:23: error: invalid operands to binary expression ('ostream' (aka 'basic_ostream&lt;char&gt;') and 'const std::vector&lt;char, std::allocator&lt;char&gt; &gt;')</span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; t &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            ~~~~~~~~~ ^  ~</span><br></pre></td></tr></table></figure>\n<p>可以看到编译器给出了没办法调用<code>std::cout&lt;&lt; t &lt;&lt; std::endl</code>的错误，t是一个<code>std::vector&lt;char&gt;</code>类型。<br>看到这里你应该明白了，在上述例子的第14行中，编译器对模板使用了<code>std::vector&lt;char&gt;</code>类型进行实例化，实例化后的Printer类变成了这个样子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Printer</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Printer() &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DoIt</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt;&amp; t)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeid</span>(<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt;) == <span class=\"keyword\">typeid</span>(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; t &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"I don't know how to print\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>虽然第8行的if永远都不会成立，但是编译器可没有那么聪明。他只看到了你要对 <code>std::vector&lt;char&gt;</code>类型调用std::cout进行输出，这当然是不行的。<br>你可能会想，要是编译器足够聪明，可以把这段永远不会执行的if分支在编译期给消灭掉，不就得了吗？对此我们暂时按下不表。先来看看在C++11标准下，要如何解决这个问题。也就是说，如何实现一个 “编译期的if”。</p>\n<p>另一个想法映入眼帘，</p>\n<p>我们要如何实现针对类成员函数的“偏特化”。</p>\n<p>先把正确答案贴上，别急着关闭网页，我慢慢跟你解释。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Printer</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Printer() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> U = T&gt;</span><br><span class=\"line\">    <span class=\"keyword\">void</span></span><br><span class=\"line\">    DoIt(<span class=\"keyword\">const</span> T&amp; t, <span class=\"keyword\">typename</span> <span class=\"built_in\">std</span>::enable_if&lt;<span class=\"built_in\">std</span>::is_same&lt;U, <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&gt;::value, <span class=\"keyword\">void</span>&gt;::type * = <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; t &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> U = T&gt;</span><br><span class=\"line\">    <span class=\"keyword\">void</span></span><br><span class=\"line\">    DoIt(<span class=\"keyword\">const</span> T&amp; t, <span class=\"keyword\">typename</span> <span class=\"built_in\">std</span>::enable_if&lt;!<span class=\"built_in\">std</span>::is_same&lt;U, <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&gt;::value, <span class=\"keyword\">void</span>&gt;::type * = <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"I don't know how to print\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>先从本文的标题说起。SFINAE是「Substitution failure is not an error」的缩写。</p>\n<h2 id=\"typename\"><a href=\"#typename\" class=\"headerlink\" title=\"typename\"></a>typename</h2><p><a href=\"http://feihu.me/blog/2014/the-origin-and-usage-of-typename/\" target=\"_blank\" rel=\"noopener\">http://feihu.me/blog/2014/the-origin-and-usage-of-typename/</a></p>\n<h2 id=\"SFINAE\"><a href=\"#SFINAE\" class=\"headerlink\" title=\"SFINAE\"></a>SFINAE</h2><p><a href=\"https://zhuanlan.zhihu.com/p/21314708\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/21314708</a></p>\n<h2 id=\"immediate-context\"><a href=\"#immediate-context\" class=\"headerlink\" title=\"immediate context\"></a>immediate context</h2><p><a href=\"https://codeday.me/en/qa/20190306/13897.html\" target=\"_blank\" rel=\"noopener\">https://codeday.me/en/qa/20190306/13897.html</a></p>\n<h2 id=\"std-enable-if\"><a href=\"#std-enable-if\" class=\"headerlink\" title=\"std::enable_if_\"></a>std::enable_if_</h2>","site":{"data":{}},"excerpt":"","more":"<p>最近在写模板类的时候遇到一个问题：一个类成员函数如何针对某一特定的<code>template&lt;typename T&gt;</code> 模板参数类型，有默认的行为。</p>\n<p>请你先想五秒钟，再接着往下看。</p>\n<p>我想你应该和我一样，映入眼帘的第一个想法，是在这个函数里调用typeid(T)来判断T的类型，以此来让函数针对某一类型T有默认的行为：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeid</span>(T) == <span class=\"keyword\">typeid</span>(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>)) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 针对 string 的默认行为</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是很抱歉，事与愿违，事情远远没有我们想象的那么简单。<br>发生了什么事呢？<br>让我们先来个看个完整的例子</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Printer</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Printer() &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DoIt</span><span class=\"params\">(<span class=\"keyword\">const</span> T&amp; t)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeid</span>(T) == <span class=\"keyword\">typeid</span>(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; t &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"I don't know how to print\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Printer&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&gt; p;</span><br><span class=\"line\">    p.DoIt(<span class=\"string\">\"WTF\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Printer&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt;&gt; p2;</span><br><span class=\"line\">    p2.DoIt(&#123;<span class=\"string\">'W'</span>, <span class=\"string\">'T'</span>, <span class=\"string\">'F'</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译它</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">% clang++ SFINAE.cpp -<span class=\"built_in\">std</span>=c++<span class=\"number\">11</span></span><br><span class=\"line\">SFINAE.cpp:14:23: error: invalid operands to binary expression ('ostream' (aka 'basic_ostream&lt;char&gt;') and 'const std::vector&lt;char, std::allocator&lt;char&gt; &gt;')</span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; t &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            ~~~~~~~~~ ^  ~</span><br></pre></td></tr></table></figure>\n<p>可以看到编译器给出了没办法调用<code>std::cout&lt;&lt; t &lt;&lt; std::endl</code>的错误，t是一个<code>std::vector&lt;char&gt;</code>类型。<br>看到这里你应该明白了，在上述例子的第14行中，编译器对模板使用了<code>std::vector&lt;char&gt;</code>类型进行实例化，实例化后的Printer类变成了这个样子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Printer</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Printer() &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DoIt</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt;&amp; t)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeid</span>(<span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">char</span>&gt;) == <span class=\"keyword\">typeid</span>(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; t &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"I don't know how to print\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>虽然第8行的if永远都不会成立，但是编译器可没有那么聪明。他只看到了你要对 <code>std::vector&lt;char&gt;</code>类型调用std::cout进行输出，这当然是不行的。<br>你可能会想，要是编译器足够聪明，可以把这段永远不会执行的if分支在编译期给消灭掉，不就得了吗？对此我们暂时按下不表。先来看看在C++11标准下，要如何解决这个问题。也就是说，如何实现一个 “编译期的if”。</p>\n<p>另一个想法映入眼帘，</p>\n<p>我们要如何实现针对类成员函数的“偏特化”。</p>\n<p>先把正确答案贴上，别急着关闭网页，我慢慢跟你解释。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Printer</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Printer() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> U = T&gt;</span><br><span class=\"line\">    <span class=\"keyword\">void</span></span><br><span class=\"line\">    DoIt(<span class=\"keyword\">const</span> T&amp; t, <span class=\"keyword\">typename</span> <span class=\"built_in\">std</span>::enable_if&lt;<span class=\"built_in\">std</span>::is_same&lt;U, <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&gt;::value, <span class=\"keyword\">void</span>&gt;::type * = <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; t &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> U = T&gt;</span><br><span class=\"line\">    <span class=\"keyword\">void</span></span><br><span class=\"line\">    DoIt(<span class=\"keyword\">const</span> T&amp; t, <span class=\"keyword\">typename</span> <span class=\"built_in\">std</span>::enable_if&lt;!<span class=\"built_in\">std</span>::is_same&lt;U, <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&gt;::value, <span class=\"keyword\">void</span>&gt;::type * = <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"I don't know how to print\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>先从本文的标题说起。SFINAE是「Substitution failure is not an error」的缩写。</p>\n<h2 id=\"typename\"><a href=\"#typename\" class=\"headerlink\" title=\"typename\"></a>typename</h2><p><a href=\"http://feihu.me/blog/2014/the-origin-and-usage-of-typename/\" target=\"_blank\" rel=\"noopener\">http://feihu.me/blog/2014/the-origin-and-usage-of-typename/</a></p>\n<h2 id=\"SFINAE\"><a href=\"#SFINAE\" class=\"headerlink\" title=\"SFINAE\"></a>SFINAE</h2><p><a href=\"https://zhuanlan.zhihu.com/p/21314708\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/21314708</a></p>\n<h2 id=\"immediate-context\"><a href=\"#immediate-context\" class=\"headerlink\" title=\"immediate context\"></a>immediate context</h2><p><a href=\"https://codeday.me/en/qa/20190306/13897.html\" target=\"_blank\" rel=\"noopener\">https://codeday.me/en/qa/20190306/13897.html</a></p>\n<h2 id=\"std-enable-if\"><a href=\"#std-enable-if\" class=\"headerlink\" title=\"std::enable_if_\"></a>std::enable_if_</h2>"}],"PostAsset":[{"_id":"source/_posts/The Curse of Productivity/1.png","slug":"1.png","post":"ck58xgwo30002xqued4hfbdrq","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[],"Tag":[]}}